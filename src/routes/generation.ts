import express from 'express';
import { Generation, IGeneration } from '../models/Generation';
import { GitHubService } from '../services/GitHubService';
import { AIAgentService } from '../services/AIAgentService';
import { DockerService } from '../services/DockerService';

const router = express.Router();

// POST /api/generation/generate
router.post('/generate', async (req, res) => {
  try {
    const { githubUrl, githubToken } = req.body;

    if (!githubUrl || !githubToken) {
      return res.status(400).json({
        error: 'GitHub URL and token are required'
      });
    }

    // Create new generation record
    const generation = new Generation({
      githubUrl,
      githubToken,
      buildStatus: 'pending'
    });

    await generation.save();

    // Start the generation process asynchronously
    processGeneration((generation as any)._id.toString());

    res.json({
      success: true,
      generationId: (generation as any)._id.toString(),
      message: 'Generation process started'
    });

  } catch (error) {
    console.error('Error starting generation:', error);
    res.status(500).json({
      error: 'Failed to start generation process'
    });
  }
});

// GET /api/generation/status/:id
router.get('/status/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const generation = await Generation.findById(id);

    if (!generation) {
      return res.status(404).json({
        error: 'Generation not found'
      });
    }

    res.json({
      success: true,
      generation: {
        id: (generation as any)._id.toString(),
        githubUrl: generation.githubUrl,
        techStack: generation.techStack,
        dockerfile: generation.dockerfile,
        buildStatus: generation.buildStatus,
        imageId: generation.imageId,
        error: generation.error,
        createdAt: generation.createdAt,
        updatedAt: generation.updatedAt
      }
    });

  } catch (error) {
    console.error('Error fetching generation status:', error);
    res.status(500).json({
      error: 'Failed to fetch generation status'
    });
  }
});

// GET /api/generation/history
router.get('/history', async (req, res) => {
  try {
    const { page = 1, limit = 10 } = req.query;
    const skip = (Number(page) - 1) * Number(limit);

    const generations = await Generation.find()
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(Number(limit))
      .select('-githubToken'); // Exclude sensitive data

    const total = await Generation.countDocuments();

    res.json({
      success: true,
      generations,
      pagination: {
        page: Number(page),
        limit: Number(limit),
        total,
        pages: Math.ceil(total / Number(limit))
      }
    });

  } catch (error) {
    console.error('Error fetching generation history:', error);
    res.status(500).json({
      error: 'Failed to fetch generation history'
    });
  }
});

// POST /api/generation/push-dockerfile
router.post('/push-dockerfile', async (req, res) => {
  try {
    const { generationId, commitMessage } = req.body;

    if (!generationId) {
      return res.status(400).json({
        error: 'Generation ID is required'
      });
    }

    const generation = await Generation.findById(generationId);
    if (!generation) {
      return res.status(404).json({
        error: 'Generation not found'
      });
    }

    if (!generation.dockerfile) {
      return res.status(400).json({
        error: 'No Dockerfile found for this generation'
      });
    }

    // Push Dockerfile to GitHub repository
    const githubService = new GitHubService(generation.githubToken);
    const success = await githubService.pushDockerfileToRepository(
      generation.githubUrl,
      generation.dockerfile,
      commitMessage || 'Add Dockerfile generated by DockGen AI'
    );

    if (success) {
      res.json({
        success: true,
        message: 'Dockerfile successfully pushed to repository'
      });
    } else {
      res.status(500).json({
        error: 'Failed to push Dockerfile to repository'
      });
    }

  } catch (error) {
    console.error('Error pushing Dockerfile:', error);
    res.status(500).json({
      error: error instanceof Error ? error.message : 'Failed to push Dockerfile to repository'
    });
  }
});

// GET /api/generation/images
router.get('/images', async (req, res) => {
  try {
    const dockerService = new DockerService();
    const images = await dockerService.listImages();
    
    res.json({
      success: true,
      images: images.map(imageName => ({
        name: imageName,
        id: imageName.split(':')[0],
        tag: imageName.split(':')[1] || 'latest'
      }))
    });
  } catch (error) {
    console.error('Error fetching Docker images:', error);
    res.status(500).json({
      error: 'Failed to fetch Docker images'
    });
  }
});

// GET /api/generation/images/:id
router.get('/images/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const dockerService = new DockerService();
    const imageInfo = await dockerService.getImageInfo(id);
    
    if (!imageInfo) {
      return res.status(404).json({
        error: 'Docker image not found'
      });
    }
    
    res.json({
      success: true,
      image: imageInfo
    });
  } catch (error) {
    console.error('Error fetching Docker image info:', error);
    res.status(500).json({
      error: 'Failed to fetch Docker image info'
    });
  }
});

// DELETE /api/generation/images/:id
router.delete('/images/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const dockerService = new DockerService();
    const success = await dockerService.deleteImage(id);
    
    if (success) {
      res.json({
        success: true,
        message: 'Docker image deleted successfully'
      });
    } else {
      res.status(500).json({
        error: 'Failed to delete Docker image'
      });
    }
  } catch (error) {
    console.error('Error deleting Docker image:', error);
    res.status(500).json({
      error: 'Failed to delete Docker image'
    });
  }
});

// Async function to process generation
async function processGeneration(generationId: string) {
  try {
    const generation = await Generation.findById(generationId);
    if (!generation) return;

    // Update status to building
    generation.buildStatus = 'building';
    await generation.save();

    // Step 1: Fetch repository
    const githubService = new GitHubService(generation.githubToken);
    let repoData;
    try {
      repoData = await githubService.fetchRepository(generation.githubUrl);
    } catch (error) {
      console.log('GitHub access failed, using fallback repository data:', error);
      repoData = await githubService.createFallbackRepositoryData(generation.githubUrl);
    }

    // Step 2: Detect tech stack
    const aiAgentService = new AIAgentService();
    const techStack = await aiAgentService.detectTechStack(repoData);

    // Update tech stack
    generation.techStack = techStack;
    await generation.save();

    // Step 3: Generate Dockerfile
    console.log(`Generating Dockerfile for generation ${generationId}`);
    const dockerfile = await aiAgentService.generateDockerfile(repoData, techStack);
    console.log(`Dockerfile generated successfully for generation ${generationId}`);

    // Update dockerfile
    generation.dockerfile = dockerfile;
    await generation.save();
    console.log(`Dockerfile saved for generation ${generationId}`);

    // Step 4: Build Docker image
    const dockerService = new DockerService();
    console.log(`Starting Docker build for generation ${generationId}`);
    
    const buildResult = await dockerService.buildImage(dockerfile, generationId, repoData);
    console.log(`Docker build completed for generation ${generationId}:`, buildResult.success);
    console.log(`üîç BuildResult details:`, JSON.stringify(buildResult, null, 2));

    if (buildResult.success) {
      generation.buildStatus = 'success';
      generation.imageId = buildResult.imageId;
      console.log(`Generation ${generationId} completed successfully with image: ${buildResult.imageId}`);
      console.log(`Setting imageId to: ${buildResult.imageId}`);
    } else {
      generation.buildStatus = 'error';
      generation.error = buildResult.error;
      console.log(`Generation ${generationId} failed with error: ${buildResult.error}`);
    }

    await generation.save();
    console.log(`Generation ${generationId} status updated to: ${generation.buildStatus}`);
    console.log(`Generation ${generationId} imageId after save: ${generation.imageId}`);

  } catch (error) {
    console.error('Error processing generation:', error);
    
    try {
      const generation = await Generation.findById(generationId);
      if (generation) {
        generation.buildStatus = 'error';
        generation.error = error instanceof Error ? error.message : 'Unknown error';
        await generation.save();
      }
    } catch (updateError) {
      console.error('Error updating generation status:', updateError);
    }
  }
}

export default router;
